// Code generated by go-swagger; DO NOT EDIT.

package shop

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShopGetProductHandlerFunc turns a function with the right signature into a shop get product handler
type ShopGetProductHandlerFunc func(ShopGetProductParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShopGetProductHandlerFunc) Handle(params ShopGetProductParams) middleware.Responder {
	return fn(params)
}

// ShopGetProductHandler interface for that can handle valid shop get product params
type ShopGetProductHandler interface {
	Handle(ShopGetProductParams) middleware.Responder
}

// NewShopGetProduct creates a new http.Handler for the shop get product operation
func NewShopGetProduct(ctx *middleware.Context, handler ShopGetProductHandler) *ShopGetProduct {
	return &ShopGetProduct{Context: ctx, Handler: handler}
}

/*ShopGetProduct swagger:route GET /product/{id} Shop shopGetProduct

ShopGetProduct shop get product API

*/
type ShopGetProduct struct {
	Context *middleware.Context
	Handler ShopGetProductHandler
}

func (o *ShopGetProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShopGetProductParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
